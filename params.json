{"name":"aTest","tagline":"GitHub API documentation","body":"# developer.github.com\r\n\r\nThis is a GitHub API resource built with [nanoc][nanoc].\r\n\r\nAll submissions are welcome. To submit a change, fork this repo, commit your changes, and send us a [pull request](http://help.github.com/send-pull-requests/).\r\n\r\n## Setup\r\n\r\nRuby 1.9 is required to build the site.\r\n\r\nGet the nanoc gem, plus kramdown for Markdown parsing:\r\n\r\n```sh\r\n$ bundle install\r\n```\r\n\r\nYou can see the available commands with nanoc:\r\n\r\n```sh\r\n$ bundle exec nanoc -h\r\n```\r\n\r\nNanoc has [some nice documentation](http://nanoc.ws/docs/tutorial/) to get you started.  Though if you're mainly concerned with editing or adding content, you won't need to know much about nanoc.\r\n\r\n[nanoc]: http://nanoc.stoneship.org/\r\n\r\n## Styleguide\r\n\r\nNot sure how to structure the docs?  Here's what the structure of the\r\nAPI docs should look like:\r\n\r\n    # API title\r\n\r\n    * TOC\r\n    {:toc}\r\n\r\n    ## API endpoint title\r\n\r\n        [VERB] /path/to/endpoint\r\n\r\n    ### Parameters\r\n\r\n    Name | Type | Description\r\n    -----|------|--------------\r\n    `name`|`type` | Description.\r\n\r\n    ### Input (request JSON body)\r\n\r\n    Name | Type | Description\r\n    -----|------|--------------\r\n    `name`|`type` | Description.\r\n\r\n    ### Response\r\n\r\n    <%= headers 200, :pagination => default_pagination_rels, 'X-Custom-Header' => \"value\" %>\r\n    <%= json :resource_name %>\r\n\r\n**Note**: We're using [Kramdown Markdown extensions](http://kramdown.rubyforge.org/syntax.html), such as definition lists.\r\n\r\n### JSON Responses\r\n\r\nWe specify the JSON responses in Ruby so that we don't have to write\r\nthem by hand all over the docs.  You can render the JSON for a resource\r\nlike this:\r\n\r\n```erb\r\n<%= json :issue %>\r\n```\r\n\r\nThis looks up `GitHub::Resources::ISSUE` in `lib/resources.rb`.\r\n\r\nSome actions return arrays.  You can modify the JSON by passing a block:\r\n\r\n```erb\r\n<%= json(:issue) { |hash| [hash] } %>\r\n```\r\n\r\n### Terminal blocks\r\n\r\nYou can specify terminal blocks with `pre.terminal` elements.  (It'd be\r\nnice if Markdown could do this more cleanly.)\r\n\r\n```html\r\n<pre class=\"terminal\">\r\n$ curl foobar\r\n....\r\n</pre>\r\n```\r\n\r\nThis is not a `curl` tutorial though. Not every API call needs\r\nto show how to access it with `curl`.\r\n\r\n## Development\r\n\r\nNanoc compiles the site into static files living in `./output`.  It's\r\nsmart enough not to try to compile unchanged files:\r\n\r\n```sh\r\n$ bundle exec nanoc compile\r\nLoading site data...\r\nCompiling site...\r\n   identical  [0.00s]  output/css/960.css\r\n   identical  [0.00s]  output/css/pygments.css\r\n   identical  [0.00s]  output/css/reset.css\r\n   identical  [0.00s]  output/css/styles.css\r\n   identical  [0.00s]  output/css/uv_active4d.css\r\n      update  [0.28s]  output/index.html\r\n      update  [1.31s]  output/v3/gists/comments/index.html\r\n      update  [1.92s]  output/v3/gists/index.html\r\n      update  [0.25s]  output/v3/issues/comments/index.html\r\n      update  [0.99s]  output/v3/issues/labels/index.html\r\n      update  [0.49s]  output/v3/issues/milestones/index.html\r\n      update  [0.50s]  output/v3/issues/index.html\r\n      update  [0.05s]  output/v3/index.html\r\n\r\nSite compiled in 5.81s.\r\n```\r\n\r\nYou can setup whatever you want to view the files. If using the adsf\r\ngem (as listed in the Gemfile), you can start Webrick:\r\n\r\n```sh\r\n$ bundle exec nanoc view\r\n$ open http://localhost:3000\r\n```\r\n\r\nCompilation times got you down?  Use `autocompile`!\r\n\r\n```sh\r\n$ bundle exec nanoc autocompile\r\n```\r\n\r\nThis starts a web server too, so there's no need to run `nanoc view`.\r\nOne thing: remember to add trailing slashes to all nanoc links!\r\n\r\n## Deploy\r\n\r\n```sh\r\n$ bundle exec rake publish\r\n```\r\n\r\n## TODO\r\n\r\n* Integrate through a simple hurl.it app for live API calls.\r\n* <del>Maybe add a nice TOC at the top of each page.</del>\r\n* Write a task for verifying JSON Resource examples against the actual\r\n  API.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}